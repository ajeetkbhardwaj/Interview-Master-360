{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Interview Master 360  <p>A Comprehensive Guide to Mastering Technical Interviews</p>"},{"location":"#practical-programming-problems","title":"Practical Programming Problems","text":""},{"location":"#1-easy","title":"1. Easy","text":"<p>Areas : Linear Algebra, Statistics, Optimization, Machine Learning, Deep Learning etc</p> ID Title Difficulty Category Status 1 Matrix-Vector Dot Product easy Linear Algebra Done 2 Transpose of a Matrix easy Linear Algebra Done 3 Reshape Matrix easy Linear Algebra Done 4 Calculate Mean by Row or Column easy Linear Algebra Done 5 Scalar Multiplication of a Matrix easy Linear Algebra Done 6 Calculate Covariance Matrix easy Statistics 7 Linear Regression Using Normal Equation easy Machine Learning 8 Linear Regression Using Gradient Descent easy Machine Learning 9 Feature Scaling Implementation easy Machine Learning 10 Sigmoid Activation Function Understanding easy Deep Learning 11 Softmax Activation Function Implementation easy Deep Learning 12 Single Neuron easy Deep Learning 13 Transformation Matrix from Basis B to C easy Linear Algebra 14 Random Shuffle of Dataset easy Machine Learning 15 Batch Iterator for Dataset easy Machine Learning 16 One-Hot Encoding of Nominal Values easy Machine Learning 35 Convert Vector to Diagonal Matrix easy Linear Algebra 36 Calculate Accuracy Score easy Machine Learning 39 Implementation of Log Softmax Function easy Deep Learning 42 Implement ReLU Activation Function easy Deep Learning 43 Implement Ridge Regression Loss Function easy Machine Learning 44 Leaky ReLU Activation Function easy Deep Learning 45 Linear Kernel Function easy Machine Learning 46 Implement Precision Metric easy Machine Learning 52 Implement Recall Metric in Binary Classification easy Machine Learning 56 KL Divergence Between Two Normal Distributions easy Deep Learning 61 Implement F-Score Calculation for Binary Classification easy Machine Learning 64 Implement Gini Impurity Calculation for a Set of Classes easy Machine Learning 65 Implement Compressed Row Sparse Matrix (CSR) Format Conversion easy Linear Algebra 66 Implement Orthogonal Projection of a Vector onto a Line easy Linearr Algebra 67 Implement Compressed Column Sparse Matrix Format (CSC) easy Linear Algebra 69 Calculate R-squared for Regression Analysis easy Machine Learning 70 Calculate Image Brightness easy Computer Vision 71 Calculate Root Mean Square Error (RMSE) easy Machine Learning 72 Calculate Jaccard Index for Binary Classification easy Machine Learning 73 Calculate Dice Score for Classification easy Machine Learning 75 Generate a Confusion Matrix for Binary Classification easy Machine Learning 76 Calculate Cosine Similarity Between Vectors easy Linear Algebra 78 Descriptive Statistics Calculator easy Statistics 81 Poisson Distribution Probability Calculator easy Probability 82 Grayscale Image Contrast Calculator easy Computer Vision 83 Dot Product Calculator easy Linear Algebra 84 Phi Transformation for Polynomial Features easy Linear Algebra 86 Detect Overfitting or Underfitting easy Machine Learning 93 Calculate Mean Absolute Error (MAE) easy Machine Learning 95 Calculate the Phi Coefficient easy Statistics 96 Implement the Hard Sigmoid Activation Function easy Deep Learning 97 Implement the ELU Activation Function easy Deep Learning 98 Implement the PReLU Activation Function easy Deep Learning 99 Implement the Softplus Activation Function easy Deep Learning 100 Implement the Softsign Activation Function easy Deep Learning 102 Implement the Swish Activation Function easy Deep Learning 103 Implement the SELU Activation Function easy Deep Learning 104 Binary Classification with Logistic Regression easy Machine Learning 108 Measure Disorder in Apple Colors easy Machine Learning 112 Min-Max Normalization of Feature Values easy Data Preprocessing 113 Implement a Simple Residual Block with Shortcut Connection easy Deep Learning 114 Implement Global Average Pooling easy Deep Learning 115 Implement Batch Normalization for BCHW Input easy Deep Learning 116 Derivative of a Polynomial easy calculus 118 Compute the Cross Product of Two 3D Vectors easy Linear Algebra 120 Bhattacharyya Distance Between Two Distributions easy Statistics 121 Vector Element-wise Sum easy Linear Algebra 123 Calculate Computational Efficiency of MoE easy Deep Learning 128 Dynamic Tanh: Normalization-Free Transformer Activation easy Deep Learning 129 Calculate Unigram Probability from Corpus easy NLP 134 Compute Multi-class Cross-Entropy Loss easy Deep Learning 135 Implement Early Stopping Based on Validation Loss easy Machine Learning 141 Shift and Scale Array to Target Range easy Machine Learning 145 Adagrad Optimizer easy Deep Learning 146 Momentum Optimizer easy Deep Learning 147 GeLU Activation Function easy Deep Learning 148 Adamax Optimizer easy Deep Learning 153 StepLR Learning Rate Scheduler easy Machine Learning 154 ExponentialLR Learning Rate Scheduler easy Machine Learning 156 Implement SwiGLU activation function easy Deep Learning 162 Upper Confidence Bound (UCB) Action Selection easy Reinforcement Learning 165 Compute Discounted Return easy Reinforcement Learning 167 Calculate the Discounted Return for a Given Trajectory easy Reinforcement Learning 168 Calculate Conditional Probability from Data easy Probability"},{"location":"#2-medium","title":"2. Medium","text":"ID Title Difficulty Category Status 177NEW Implement MuonClip (qk-clip) for Stabilizing Attention medium Deep Learning 6 Calculate Eigenvalues of a Matrix medium Linear Algebra 7 Matrix Transformation medium Linear Algebra 8 Calculate 2x2 Matrix Inverse medium Linear Algebra 9 Matrix times Matrix medium Linear Algebra 11 Solve Linear Equations using Jacobi Method medium Linear Algebra 17 K-Means Clustering medium Machine Learning 18 Implement K-Fold Cross-Validation medium Machine Learning 19 Principal Component Analysis (PCA) Implementation medium Machine Learning 25 Single Neuron with Backpropagation medium Deep Learning 26 Implementing Basic Autograd Operations medium Deep Learning 31 Divide Dataset Based on Feature Threshold medium Machine Learning 32 Generate Sorted Polynomial Features medium Machine Learning 33 Generate Random Subsets of a Dataset medium Machine Learning 37 Calculate Correlation Matrix medium Linear Algebra 41 Simple Convolutional 2D Layer medium Deep Learning 47 Implement Gradient Descent Variants with MSE Loss medium Machine Learning 48 Implement Reduced Row Echelon Form (RREF) Function medium Linear Algebra 49 Implement Adam Optimization Algorithm medium Deep Learning 50 Implement Lasso Regression using Gradient Descent medium Machine Learning 51 Optimal String Alignment Distance medium NLP 53 Implement Self-Attention Mechanism medium Deep Learning 54 Implementing a Simple RNN medium Deep Learning 55 2D Translation Matrix Implementation medium Linear Algebra 57 Gauss-Seidel Method for Solving Linear Systems medium Linear Algebra 58 Gaussian Elimination for Solving Linear Systems medium Linear Algebra 59 Implement Long Short-Term Memory (LSTM) Network medium Deep Learning 60 Implement TF-IDF (Term Frequency-Inverse Document Frequency) medium NLP 68 Find the Image of a Matrix Using Row Echelon Form medium Linear Algebra 74 Create Composite Hypervector for a Dataset Row medium Linear Algebra 77 Calculate Performance Metrics for a Classification Model medium Machine Learning 79 Binomial Distribution Probability medium Probability 48 Implement Reduced Row Echelon Form (RREF) Function medium Linear Algebra 49 Implement Adam Optimization Algorithm medium Deep Learning 50 Implement Lasso Regression using Gradient Descent medium Machine Learning 51 Optimal String Alignment Distance medium NLP 53 Implement Self-Attention Mechanism medium Deep Learning 54 Implementing a Simple RNN medium Deep Learning 55 2D Translation Matrix Implementation medium Linear Algebra 57 Gauss-Seidel Method for Solving Linear Systems medium Linear Algebra 58 Gaussian Elimination for Solving Linear Systems medium Linear Algebra 59 Implement Long Short-Term Memory (LSTM) Network medium Deep Learning 60 Implement TF-IDF (Term Frequency-Inverse Document Frequency) medium NLP 68 Find the Image of a Matrix Using Row Echelon Form medium Linear Algebra 74 Create Composite Hypervector for a Dataset Row medium Linear Algebra 77 Calculate Performance Metrics for a Classification Model medium Machine Learning 79 Binomial Distribution Probability medium Probability 132 Simulate Markov Chain Transitions medium Probability 133 Implement Q-Learning Algorithm for MDPs medium Reinforcement Learning 136 Calculate KL Divergence Between Two Multivariate Gaussian Distributions medium Probability 138 Find the Best Gini-Based Split for a Binary Decision Tree medium Machine Learning 139 Elastic Net Regression via Gradient Descent medium Machine Learning 140 Bernoulli Naive Bayes Classifier medium Machine Learning 142 Gridworld Policy Evaluation medium Reinforcement Learning 143 Instance Normalization (IN) Implementation medium Deep Learning 144 Apriori Frequent Itemset Mining medium Machine Learning 149 Adadelta Optimizer medium Deep Learning 151 Dropout Layer medium Deep Learning 152 Implementing ROUGE Score medium Machine Learning 155 CosineAnnealingLR Learning Rate Scheduler medium Machine Learning 157 Implement the Bellman Equation for Value Iteration medium Reinforcement Learning 158 Epsilon-Greedy Action Selection for n-Armed Bandit medium Reinforcement Learning 159 Incremental Mean for Online Reward Estimation medium Reinforcement Learning 160 Mixed Precision Training medium Machine Learning 161 Exponential Weighted Average of Rewards medium Reinforcement Learning 163 Gradient Bandit Action Selection medium Reinforcement Learning 166 Evaluate Expected Value in a Markov Decision Process medium Reinforcement Learning 169 Implement AdamW Optimizer Step medium Optimization 170 Muon Optimizer Step with Matrix Preconditioning medium Optimization 171 Minimax Algorithm for Tic-Tac-Toe medium Game Theory 172 Muon Optimizer Update with Newton-Schulz Iteration medium Deep Learning 173 Implement K-Nearest Neighbors medium Machine Learning 175 Implement the SARSA Algorithm on policy medium Reinforcement Learning 176 Chi-square Probability Distribution medium Probability"},{"location":"#3-hard","title":"3. Hard","text":"ID Title Difficulty Category Status 12 Singular Value Decomposition (SVD) hard Linear Algebra 13 Determinant of a 4x4 Matrix using Laplace's Expansion (hard) hard Linear Algebra 20 Decision Tree Learning hard Machine Learning 21 Pegasos Kernel SVM Implementation hard Machine Learning 28 SVD of a 2x2 Matrix using eigen values &amp; vectors hard Linear Algebra 38 Implement AdaBoost Fit Method hard Machine Learning 40 Implementing a Custom Dense Layer in Python hard Deep Learning 62 Implement a Simple RNN with Backpropagation Through Time (BPTT) hard Deep Learning 63 Implement the Conjugate Gradient Method for Solving Linear Systems hard Linear Algebra 85 Positional Encoding Calculator hard Deep Learning 88 GPT-2 Text Generation hard NLP 94 Implement Multi-Head Attention hard Deep Learning 101 Implement the GRPO Objective Function hard Reinforcement Learning 105 Train Softmax Regression with Gradient Descent hard Machine Learning 106 Train Logistic Regression with Gradient Descent hard Machine Learning 122 Policy Gradient with REINFORCE hard Reinforcement Learning 125 Implement a Sparse Mixture of Experts Layer hard Deep Learning 130 Implement a Simple CNN Training Function with Backpropagation hard Deep Learning 137 Implement a Dense Block with 2D Convolutions hard Deep Learning 164 Gambler's Problem: Value Iteration hard Reinforcement Learning 174 Train a Simple GAN on 1D Gaussian Data hard Deep Learning"},{"location":"#reference-and-resources","title":"Reference and Resources","text":"<p>Below is the list of internet online website and offline resources, used to practice</p> <ol> <li>https://www.deep-ml.com/problems</li> <li>https://www.deep-ml.com/deep-0</li> </ol>"},{"location":"datastructureAndalgorithm/Quest-1/","title":"Quest-1 :","text":"<ol> <li> <p>Explain how would you reverse an array in place. Inplace : without using extra space we modify the array to become reversed</p> </li> <li> <p>What is difference between array and linked list ?</p> </li> <li> <p>Key Difference : Data Organization, Memory management and Complexity Analysis</p> </li> <li> <p>Can you explain, when we should prefer to use array or linked lists ?</p> </li> <li>Arrays : Need for direct or random access like LookUp Table, When data will remain unchanged most of the time but requires most of time to access the elements.</li> <li>Linked Lists : Frequent insertions and deletions are expected, especially in the middle. The exact size of the list isn\u2019t known in advance, and you want the memory to be used flexibly. The primary operations are sequential, such as iteration from the beginning to the end.</li> </ol>"},{"location":"dlArchitectures/Prob-1/","title":"Deep Learning Coding Problems","text":"<p>Problem-1 : Sigmoid Activation Function Understanding</p> <p>Write a Python function that computes the output of the sigmoid activation function given an input value z. The function should return the output rounded to four decimal places.</p> <p>Example : Input z = 0 and Output : 0.5 \\ Reasoning: The sigmoid function is defined as \u03c3(z) = 1 / (1 + exp(-z)). For z = 0, exp(-0) = 1, hence the output is 1 / (1 + 1) = 0.5.</p> <pre><code>import math\n\ndef sigmoid(z : float) -&gt; float:\n    # Your code here\n    return result\n</code></pre> <p>Problem-2 : Softmax Activation Function Implementation</p> <p>Write a Python function that computes the softmax activation for a given list of scores. The function should return the softmax values as a list, each rounded to four decimal places.</p> <p>Example : Input : scores = [1, 2, 3] and Output : [0.0900, 0.2447, 0.6652] \\ Reasoning: The softmax function converts a list of values into a probability distribution. The probabilities are proportional to the exponential of each element divided by the sum of the exponentials of all elements in the list.</p> <p><pre><code>import math\n\ndef softmax(scores: list[float]) -&gt; list[float]:\n    # Your code here\n    return probabilities\n</code></pre> Problem-3 : Implement SwiGLU activation function</p> <p>Implement a Python function that applies the SwiGLU activation function to a NumPy array. Assume the input array has already been passed through a linear projection and has shape (batch_size, 2d). Round each output to four decimal places and return the result as a NumPy array of the shape (batch_size, d).</p> <p>Example : Input : <code>np.array([[1, -1, 1000, -1000]])</code> and Output : <code>[[1000., 0.]]</code>. \\ Reasoning: The input is of shape (1, 4), so it is split into x1 = [1, -1] and x2 = [1000, -1000]. The sigmoid of 1000 is approximately 1, and the sigmoid of -1000 is approximately 0 due to saturation. Thus, Swish(1000) \u2248 1000 x 1 = 1000 and Swish(-1000) \u2248 -1000 x 0 = 0. Then, SwiGLU = x1 * Swish(x2) = [1 x 1000, -1 x 0] = [1000, 0].</p> <p>**Problem-4 : **</p>"},{"location":"frameworks/Apache%20AirFlow/airflow/","title":"AirFlow","text":"<ol> <li>Apache Airflow with Astro : Automate and orchestrate your ML workflows using Airflow with Astronomer, ensuring your pipelines run seamlessly.</li> </ol>"},{"location":"frameworks/Apache%20Flink/flank/","title":"Apache Flank","text":""},{"location":"frameworks/Apache%20Kafka/kafka/","title":"Apache Kafka","text":""},{"location":"frameworks/Apache%20Wayang/wayang/","title":"wayang","text":""},{"location":"frameworks/Apache%20Wayang/wayang/#cross-platform-data-processing","title":"Cross-platform data processing","text":"<ul> <li>Introduction to Wayang: a platform for cross-framework data processing, allowing optimizations across Spark, Flink, and Relational Databases.</li> <li>Sessions about data systems research at IITD, guiding participants interested in pursuing higher studies, and research success stories.</li> <li>Lab: Hands-on exercises with Wayang.</li> </ul>"},{"location":"mlAlgorithms/intro/","title":"ML Algorithms","text":""},{"location":"mlFoundation/intro/","title":"ML Foundation","text":""},{"location":"mlPractice/intro/","title":"ML Practice","text":""},{"location":"mlSystems/Quest-10/","title":"Quest 10","text":"Model Deployment and Monitoring  <ol> <li>What is model deployment, and why is it challenging?</li> </ol> Answer  1. A process of packaging trained model and integrate it into the production system using REST API, where model can serve prediction on new unseen data to the user. Hence It bridges the gap between developement and serving to the end users(real world usecase).   2. Deployment into the production system become challenging due to the following     - Enviroment Mismatch from Developement to Deployment    - Model Serialization : Choosing the right format (e.g., Joblib, Pickle, ONNX, TorchScript) that is portable and secure.    - Infrastructure Readiness : We have to setup servers, containers or use cloud services to serve prediction at scale    - Latency and Throughput Issues :  Ensuring low prediction time, especially for real-time applications.    - Monitoriing and Observability : Detecting model or data drift or outage quickly    - Data and Model Version Control : Managing multiple version of model and dataset and track each version of model live.  <ol> <li>Can you describe how many different ways to deploy a machine learning model ?</li> </ol>  Answer   There are multiple ways to deploy a machine learning model, each suited to different use cases, latency requirements, infrastructure, and scalability needs. Thus, comprehensive list of main deployment strategies are as follows 1. Batch Inference : We perform predict on large batches of data at scheduled intervals (e.g., nightly reports or churn scoring).It only usefull when we don't need  real-time response. Tools : Apache Spark, Apache Airflow, Azure Data Factory etc. 2. Online(Real-time) Inference : Our model serve instant predictions through APIs for use cases needing low latency (e.g., recommendation systems, real-time fraud detection). It uses frameworks like Flask, FastAPI, TensorFlow Serving, TorchServe etc to build API. 3. Edge Deployment : We deploy our models to the edge devices like mobile, IoT, embedded systems etc for localized or offline inference. It uses frameworks like TensorFlow Lite, ONNX, Apple Core ML etc 4. Streaming Deployment : Continuously ingest and infer data streams in near real-time (e.g., sensor data, financial market feeds). Tools: Kafka + Faust, Spark Streaming, Apache Flink. 5. Containerized Deployment : Package models and dependencies into containers like Docker for environment consistency and portability. Orchestrate with Kubernetes, AWS ECS for scaling and management. 6. Model-as-a-Service (MaaS) : Use managed cloud platforms that provide hosting, scaling, and monitoring out of the box. Platforms: AWS SageMaker, Azure Machine Learning, Google Vertex AI, Databricks Model Serving.  <ol> <li>What is a REST API, and how do you use it to deploy models?</li> </ol>  Answer  <ol> <li>Can you explain CI/CD Pipeline into the MLOps ?</li> </ol>  Answer  <ol> <li>How do you monitor the performance of a deployed model?</li> </ol>  Answer  <ol> <li>What are some common tools for model monitoring and logging?</li> </ol>  Answer  <ol> <li>Describe a scenario where you had to roll back a deployed model.</li> </ol>  Answer  <ol> <li> <p>How do you handle model drift in production?</p> </li> <li> <p>What is canary deployment and why is it usefull ?</p> </li> <li> <p>Explain the concept of A/B testing in the context of model deployment.</p> </li> <li> <p>11. What are the key considerations for scaling a machine learning model?</p> </li> <li> <p>How do you ensure the security of your deployed models?</p> </li> </ol>"},{"location":"mlSystems/Quest-10/#template","title":"template :","text":"Answer"},{"location":"mlSystems/Quest-10/#references-and-reading-materials","title":"References and Reading Materials","text":"<p>[1]. https://skphd.medium.com/model-deployment-and-monitoring-interview-questions-and-answers-68cd7f48c29b \\ [2]. https://www.datacamp.com/blog/mlops-interview-questions \\ [3]. https://www.micro1.ai/interview-prep/mlops-engineer-interview-questions \\</p>"},{"location":"mlSystems/Quest-9/","title":"Quest 9","text":"<p>What is MLOps and how does it differ from DevOps?</p> <p>Describe the key stages of the MLOps lifecycle.</p> <p>What is model drift, and how would you monitor for it in production?  \u00a0 </p> <p>How would you implement a CI/CD pipeline for a machine learning model?  \u00a0 </p> <p>What is the purpose of a feature store in an ML system?  \u00a0 </p> <p>Explain the difference between Canary and Blue-Green deployment strategies for ML models.  \u00a0 </p> <p>How does data version control impact the machine learning lifecycle?  \u00a0 </p> <p>What are the challenges of maintaining consistent environments across the ML lifecycle, and how can containerization (e.g., Docker) address them?  \u00a0 </p> <p>Explain how you have used Docker containers or Kubernetes in deploying machine learning models.  \u00a0 </p> <p>What is the purpose of an orchestration tool like Airflow or Kubeflow in an ML pipeline?  \u00a0 </p>"}]}